syntax = "proto3"; // 表示ProtoBuf协议版本
option java_package = "com.yuu.protobufcase2"; // 指定生成的包结构。最终经过protoc.exe编译后，会生成对应的包，然后将类放入包中
option optimize_for = SPEED;
option java_outer_classname = "StudentPOJO"; // 最终会编译生成的外部类类名，同时也是.java文件的名称

// protobuf 允许使用Message管理其他的Message

message MyMsg {
  // 1. 定义一个枚举类型
  enum DataType {
    // proto3规范，要求enum编号必须从0开始
    StudentType = 0;
    WorkerType = 1;
  }
  // 2. 用DataType标识传入的是哪个枚举类型。我们定义了一个枚举类型，因此序号为1
  DataType data_type = 1;
  // 3. 表示每次枚举的类型，最多只能出现其中的一个，用来节省空间
  oneof dataBody {
    Student student = 2;
    Worker worker = 3;
  }
}

message Student { // 会在外部类中生成含具体业务数据的内部类，内部类名称就为Student。同时，是最终发送的POJO对象
  int32 id = 1; // int32是protobuf的类型，对应Java的int类型。最终Student内部类中，一个属性，类型为int，属性名为id，属性序号为1。
  string name = 2; // string对应Java中的String。最终会生成一个属性，类型为String，属性名为name，属性序号为2
}

message Worker {
  string name = 1;
  int32 age = 2;

}